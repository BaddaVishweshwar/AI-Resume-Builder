// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id            String    @id @default(uuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  password      String
  image         String?
  accounts      Account[]
  sessions      Session[]
  resumes       Resume[]
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  @@map("users")
}

model Account {
  id                 String  @id @default(uuid())
  userId             String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope            String?
  id_token         String? @db.Text
  session_state    String?
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Resume {
  id          String    @id @default(uuid())
  title       String
  slug        String    @unique
  userId      String    @map("user_id")
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  template    String    @default("classic")
  sections    Section[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  isPublic    Boolean   @default(false) @map("is_public")
  viewCount   Int       @default(0) @map("view_count")

  @@map("resumes")
}

model Section {
  id          String    @id @default(uuid())
  resumeId    String    @map("resume_id")
  resume      Resume    @relation(fields: [resumeId], references: [id], onDelete: Cascade)
  type        String    // e.g., 'profile', 'experience', 'education', 'skills', 'projects'
  title       String
  content     Json      // Flexible content storage
  position    Int
  isVisible   Boolean   @default(true) @map("is_visible")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("sections")
}

model Template {
  id          String    @id @default(uuid())
  name        String
  description String?
  thumbnail   String
  preview     String
  isPremium   Boolean   @default(false) @map("is_premium")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  @@map("templates")
}

enum Role {
  USER
  ADMIN
}
